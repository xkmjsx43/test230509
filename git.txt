*** 基本設置 ***
git config --global user.name "userName"
-- 設定使用者名稱

git config --global user.email "userEmail"
-- 設定使用者email

git config --list
*** 新專案建立 基本流程 ***
1. new file > project



git init
-- 初始化

git add [檔案名稱.副檔名]
__ git add git.txt
-- 選擇要存下來的檔案(索引/加入追蹤tracked)

git add .
-- 全部都要存下來(索引)


git status 
-- 確認版控狀態

git commit -m "[訊息內容必填]"
!! m === msg
__ git commit -m "eric first time"
-- 存檔

git branch 
-- 確認支線

git branch [支線名]
-- 新增支線

git checkout [支線名]
-- 切換支線

git merge [支線名]
-- 合併支線

git merge master 
-- 分支合併主線程式碼

git checkout -
-- 支線來回切換

git branch -d [支線名]
-- 刪掉主線

git log 
-- 查看存檔紀錄(commit 記錄)

git restore [要恢復的檔案.副檔名]
-- 恢復檔案

git reset -- hard
-- 讀檔，而且前一個檔案不要留下來

*** cherry pick ***
○○●○○
git cherry pick [commit hash]
-- 選取要留下的部份

*** 救資料 ***
git reflog
-- 查看所有的commit hash // f 前、b 後、q 離開
git reset [commit hash]
-- 回復點
git checkout .
-- 通通拉回來

*** 突然要做別的事情 又不想commit非常好用 ***
git stash save "[名稱]"
-- 暫時存檔(會把存檔消掉)

git stash list 
-- 查看暫時存檔的資料

git stash pop 
-- 將暫時存檔調出來

git stash apply [stashNum]


***** 雲端gitHub *****
git clone [REPO]
-- 複製github上的REPO 

git pull
-- 更新同步REPO(把gitHub上的資料拉下來)

git push
-- 更新同步REPO(把資料推上gitHub上)

git push -u [new-branch]
-- 更新同步REPO(把分支資料推上gitHub上)

git revert 
-- 把錯誤的程式碼拿掉
-- 1. git log
-- 2. commit hash

git rebase 
-- git rebase -i HEAD~3
